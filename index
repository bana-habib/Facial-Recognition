from PIL import Image,ImageTk
from tkinter import *
import tkinter as tk
import cv2
import numpy as np
import PIL
from recognise_faces import recognise

import tkinter.messagebox as tm
import csv
import pandas as pd
global root
import os
from os import path
from add_pictures import take_pictures
import pickle
from fuzzy_extractor import FuzzyExtractor

#Function to customise the GUI window
def adjustWindow(window):
    w = 1000
    h = 700
    ws = window.winfo_screenwidth()
    hs = window.winfo_screenheight()
    x = (ws/2) - (w/2)
    y = (hs/2) - (h/2)
    window.geometry('%dx%d+%d+%d' % (w,h,x,y))
    window.resizable(False,False)

#Function to display attendance
def display_attendance(df):
    dis_att = Tk()
    dis_att.geometry('580x250')
    txt = Text(dis_att) 
    txt.pack() 
    class PrintToTXT(object): 
        def write(self, s):
            txt.insert(END, s)
            return
    sys.stdout = PrintToTXT()
    #It takes the dataframe row having the attendance marked
    print('Attendance for:',df['Name'])
    print (df)
    dis_att.mainloop()

#Validates if the pin entered is correct
def validate():
    view_att.destroy()
    #id_given and pin_given are the values entered in textbox. Pin_main is the actual pin stored in database
    id_given=idd.get()
    pin_given=pin.get()
    df=pd.read_csv('student_attendance.csv')
    pin_main=df[df['ID']==id_given]['Pincode'].values[0]
    #Helper is teh folde which has keys for various users. Key is used to decrypt Pincode using Fuzzy Extractors
    path='Helper/'+str(id_given)+'.pickle'
    with open(path, 'rb') as f:
        helper = pickle.load(f)
    #r_key gives us a unique key for the id entered in textbox. If the key in database is equal to the key generated then that means both the inputs ie pincodes are same and hence user has 
    #entered correct pincodes.
    extractor = FuzzyExtractor(len(pin_given), 2)
    try: 
        r_key = extractor.reproduce(pin_given, helper)
    except:
        tm.showerror(title= 'Error', message= 'Length of passwords dont match')
    if str(r_key) == str(pin_main):
        d=df.loc[df['ID'] == id_given]        
        display_attendance(d)
    else:
        tm.showerror(title='Erorr', message= 'User Not Identified. Please check your Id or Pincode')
    
            
def view_attendance():
    global idd,pin,view_att
    view_att = Tk()
    view_att.title("View Attendance")
    adjustWindow(view_att)
    #Code to declare the variables to store values from textbox and GUI development 
    idd = IntVar(view_att)
    pin = StringVar(view_att)
    
    Label(view_att, text="", bg='lavender', width='150', height='80').place(x=0, y=0)
    Label(view_att, text="Check Students Attendence", width='50', height="4", font=("Calibri", 30,'bold'), fg='black', bg='papayawhip', anchor = CENTER).place(x=0, y=0)
    Label(view_att, text="Enter Students ID", font=("Open Sans", 11, 'bold'), fg='black', bg='lavender',anchor=W).place(x=130, y=160)
    ids=Entry(view_att, textvariable=idd).place(x=300, y=160)
    Label(view_att, text="Enter Pincode", font=("Open Sans", 11, 'bold'), fg='black', bg='lavender', anchor=W).place(x=130, y=280)
    pincode=Entry(view_att, textvariable=pin).place(x=300, y=280)
    Button(view_att, text='Submit', width=20, font=("Open Sans", 13, 'bold'), bg='brown', fg='black',command=validate).place(x=500, y=460)
    view_att.mainloop()
    
    
def add_in_csv():
    new_entry.destroy()
    #If you run the code for very first time, Helper folder is created with the helper stored for user 1.
    if not path.exists('Helper'):
        os.mkdir('Helper')
    pin=pincode_new.get()
    extractor = FuzzyExtractor(len(pin), 2)
    #Generates the key and helper for the pin code we entered. 
    key, helper = extractor.generate(pin)
    #The helper data got in last step is saved here. It will be used later for decruption
    pathh='Helper/'+str(id_new.get())+'.pickle'
    with open(pathh, 'wb') as f:
        pickle.dump(helper, f)
    #Write data to csv in various fields
    with open('student_attendance.csv', 'a', newline='') as f:
        field=[ "ID", "Name","Pincode"]
        writer = csv.DictWriter(f, fieldnames=field)
        #If the csv file is not present, ie you are the first user, then create a file and headers.
        if os.stat('student_attendance.csv').st_size == 0:
            writer.writeheader()
        writer.writerow({"ID":id_new.get(), "Name":name_new.get(), "Pincode":key})
        #messagebox.showinfo("Success", "Successfully added to CSV file")
    df=pd.read_csv('student_attendance.csv')
    df.to_csv('student_attendance.csv',na_rep='NA',index = False)
    tm.showinfo("Success", "Successfully added to CSV file")
    #Once details are entered in csv file, we will now take pictures and store them in Dataset folder.
    #Create Dataset folder if not present already. ie if first user
    if not path.exists('Dataset'):
        os.mkdir('Dataset')
    #If the pictures for the name entered in the form are already in the database, we won't click new pictures
    if not path.exists('Dataset/'+name_new.get()):
        os.mkdir('Dataset/'+name_new.get())
        take_pictures('Dataset/'+name_new.get())

     
            
def new_student():
    global id_new,name_new,pincode_new,new_entry
    new_entry = Tk()
    new_entry.title("New Entry")
    adjustWindow(new_entry)
    id_new = IntVar(new_entry)
    name_new = StringVar(new_entry)
    pincode_new = StringVar(new_entry)
    
    Label(new_entry, text=" ", bg='lavender', width='150', height='80').place(x=0, y=0)
    Label(new_entry, text="Enroll New Students", width='50', height="4", font=("Calibri", 30,'bold'), fg='black', bg='papayawhip', anchor = CENTER).place(x=0, y=0)
    Label(new_entry, text="Make sure student is in cameras view", font=("Open Sans", 11, 'italic'), fg='black', bg='lavender', anchor=CENTER).place(x=400, y=100)
    Label(new_entry, text="Enter ID", font=("Open Sans", 11, 'bold'), fg='black', bg='lavender',anchor=W).place(x=130, y=160)
    idd=Entry(new_entry, textvariable=id_new).place(x=300, y=160)
    Label(new_entry, text="Enter Students Name", font=("Open Sans", 11, 'bold'), fg='black', bg='lavender', anchor=W).place(x=130, y=220)
    name=Entry(new_entry, textvariable=name_new).place(x=300, y=220)
    Label(new_entry, text="Enter Pincode", font=("Open Sans", 11, 'bold'), fg='black', bg='lavender', anchor=W).place(x=130, y=280)
    pincode=Entry(new_entry, textvariable=pincode_new).place(x=300, y=280)
    Button(new_entry, text='Take Picture', width=20, font=("Open Sans", 13, 'bold'), bg='brown', fg='black',command=add_in_csv).place(x=500, y=460)

    new_entry.mainloop()

root = Tk()
root.title("Welcome")
adjustWindow(root)
Label(root, text="", bg='thistle', width='1000', height='800').place(x=0, y=0)
Label(root, text="Attendance System", width='50', height="4", font=("Calibri", 30,'bold'), fg='black', bg='papayawhip', anchor = CENTER).place(x=0, y=0)
Label(root, text="FOR FACULTY MEMBERS ONLY", font=("Open Sans", 11, 'italic'), fg='black', bg='papayawhip', anchor=CENTER).place(x=400, y=100)
Button(root, text='Add new record', width=17, font=("Open Sans", 15, 'bold'), bg='blue', fg='black',  command = new_student).place(x=80, y=550)
Button(root, text='View Attendance', width=17, font=("Open Sans", 15, 'bold'), bg='blue', fg='black',  command = view_attendance).place(x=380, y=550)
Button(root, text='Take Attendance', width=17, font=("Open Sans", 15, 'bold'), bg='blue', fg='black',  command = recognise).place(x=680, y=550) 
root.mainloop()


