import os
import cv2
from os import path
from fnmatch import fnmatch
#from index import adjustWindow
from PIL import Image,ImageTk
from tkinter import *
from get_encodings import get_pickel_encoding
import PIL
from Crypto.Cipher import AES
from Crypto import Random
import pickle

def take_pictures(pathh):
    global path
    path=pathh
    def adjustWindow(take_pic):
        w = 1000
        h = 700
        ws = take_pic.winfo_screenwidth()
        hs = take_pic.winfo_screenheight()
        x = (ws/2) - (w/2)
        y = (hs/2) - (h/2)
        take_pic.geometry('%dx%d+%d+%d' % (w,h,x,y))
        take_pic.resizable(False,False)

    def encrypt(path_new,count,key,iv):
        input_file = open(path_new,'rb')
        input_data = input_file.read()
        input_file.close()
        #Now we will delete the jpg image stroed since we need to "hide" facial features and store only encryptions
        os.remove(path_new)
        if not key:
            key = Random.new().read(AES.block_size)
            iv = Random.new().read(AES.block_size)
            #We save the key and iv to use it later for decryption
            with open(path+ '/' +'key.pickle', 'wb') as f:
                pickle.dump([key,iv], f)
        #We encrypt the image captured by webcam and store it as an encryption file 
        cfb_cipher = AES.new(key, AES.MODE_CFB, iv)
        enc_data = cfb_cipher.encrypt(input_data)
        enc_file = open(path + '/' + str(count) +'.enc', "wb")
        enc_file.write(enc_data)
        enc_file.close()
        
        return count,key,iv

    def display_gui():
        #Face cascade is the file used for detecting faces in image. 
        #VideoCApture is used for accessing webcam
        face_detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        cap = cv2.VideoCapture(0) #Remove cv2.CAP_DSHOW if you get error
        cap.set(3, 640) # set video width
        cap.set(4, 480) # set video height
        #Count keeps track of images captured.
        count = 0
        key=None
        iv=None
        while True:
            #Read webcam data
            ret, img = cap.read()
            #img = cv2.flip(img, -1) # flip video image vertically
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            #Detect faces in the webcam stream
            faces = face_detector.detectMultiScale(gray, 1.3, 5,minSize=(100,100))
            #If faces are present then we go in loop
            for (x,y,w,h) in faces:
                #Draw rectangle around face and write the image to disk
                cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)   
                count+=1
                cv2.imwrite(path + '/' + str(count) +'.jpg',img[y:y+h,x:x+w])
                #Now the path to image captured is provided for encryption. 
                count,key,iv=encrypt(path + '/' + str(count) +'.jpg',count,key,iv)   
            cv2.imshow('Capture image', img)
            #Stop capturing when 5 pictures of a person are captured.
            if count >= 5: 
                break
        
        cap.release()
        cv2.destroyAllWindows()
    #First we create dataset of encryptions
    display_gui()
    #Now we will get encodings for this new user by going to get_encodings file.
    get_pickel_encoding()

    
